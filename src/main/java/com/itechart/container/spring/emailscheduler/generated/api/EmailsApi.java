/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.1.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.itechart.container.spring.emailscheduler.generated.api;

import com.itechart.container.spring.emailscheduler.generated.model.Email;
import com.itechart.container.spring.emailscheduler.generated.model.EmailRequest;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-03-25T16:30:20.677955+03:00[Europe/Minsk]")

@Validated
@Api(value = "emails", description = "the emails API")
public interface EmailsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "", nickname = "create", notes = "", response = Email.class, tags = {"emails",})
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "First email sent", response = Email.class),
            @ApiResponse(code = 400, message = "Email address is invalid")})
    @RequestMapping(value = "/emails/send",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    default ResponseEntity<Email> create(@ApiParam(value = "", required = true) @Valid @RequestBody EmailRequest emailRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"emailAddress\" : \"emailAddress\",  \"lastSentAt\" : \"2000-01-23T04:56:07.000+00:00\",  \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "deleteById", notes = "", tags = {"emails",})
    @ApiResponses(value = {
            @ApiResponse(code = 204, message = "NO_CONTENT"),
            @ApiResponse(code = 400, message = "Invalid UUID")})
    @RequestMapping(value = "/emails/{id}",
            method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteById(@ApiParam(value = "", required = true) @PathVariable("id") UUID id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getById", notes = "", response = Email.class, tags = {"emails",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = Email.class),
            @ApiResponse(code = 400, message = "Invalid UUID"),
            @ApiResponse(code = 404, message = "NOT_FOUND")})
    @RequestMapping(value = "/emails/{id}",
            produces = {"application/json"},
            method = RequestMethod.GET)
    default ResponseEntity<Email> getById(@ApiParam(value = "", required = true) @PathVariable("id") UUID id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"emailAddress\" : \"emailAddress\",  \"lastSentAt\" : \"2000-01-23T04:56:07.000+00:00\",  \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "getEmails", notes = "", response = Email.class, responseContainer = "List", tags = {"emails",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = Email.class, responseContainer = "List")})
    @RequestMapping(value = "/emails",
            produces = {"application/json"},
            method = RequestMethod.GET)
    default ResponseEntity<List<Email>> getEmails() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"emailAddress\" : \"emailAddress\",  \"lastSentAt\" : \"2000-01-23T04:56:07.000+00:00\",  \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "updateById", notes = "", response = Email.class, tags = {"emails",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = Email.class),
            @ApiResponse(code = 400, message = "Invalid UUID"),
            @ApiResponse(code = 404, message = "NOT_FOUND")})
    @RequestMapping(value = "/emails/{id}",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.PUT)
    default ResponseEntity<Email> updateById(@ApiParam(value = "", required = true) @PathVariable("id") UUID id, @ApiParam(value = "") @Valid @RequestBody EmailRequest emailRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"emailAddress\" : \"emailAddress\",  \"lastSentAt\" : \"2000-01-23T04:56:07.000+00:00\",  \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
